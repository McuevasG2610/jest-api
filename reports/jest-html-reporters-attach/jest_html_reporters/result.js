window.jest_html_reporters_callback__({"numFailedTestSuites":3,"numFailedTests":17,"numPassedTestSuites":3,"numPassedTests":29,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":6,"numTotalTests":46,"startTime":1750100214574,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750100222621,"runtime":7592,"slow":true,"start":1750100215029},"testFilePath":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/poc.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["POC Test","GET Request"],"duration":508,"failureMessages":[],"fullName":"POC Test GET Request GET /post","status":"passed","title":"GET /post"},{"ancestorTitles":["POC Test","GET Request"],"duration":138,"failureMessages":[],"fullName":"POC Test GET Request GET / comments whit query params","status":"passed","title":"GET / comments whit query params"},{"ancestorTitles":["POC Test","POST request"],"duration":253,"failureMessages":[],"fullName":"POC Test POST request POST / posts","status":"passed","title":"POST / posts"},{"ancestorTitles":["POC Test","PUT Request"],"duration":458,"failureMessages":[],"fullName":"POC Test PUT Request PUT / post/{id}","status":"passed","title":"PUT / post/{id}"},{"ancestorTitles":["POC Test","PATCH Request"],"duration":369,"failureMessages":[],"fullName":"POC Test PATCH Request PATCH / post/{id}","status":"passed","title":"PATCH / post/{id}"},{"ancestorTitles":["POC Test","DELETE Request"],"duration":268,"failureMessages":[],"fullName":"POC Test DELETE Request DELETE /post/{id}","status":"passed","title":"DELETE /post/{id}"}]},{"numFailingTests":0,"numPassingTests":2,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750100222895,"runtime":7840,"slow":true,"start":1750100215055},"testFilePath":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/upload.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["Upload File"],"duration":1267,"failureMessages":[],"fullName":"Upload File POST /upload/single","status":"passed","title":"POST /upload/single"},{"ancestorTitles":["Upload File"],"duration":876,"failureMessages":[],"fullName":"Upload File POST /upload/multiple","status":"passed","title":"POST /upload/multiple"}]},{"numFailingTests":3,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750100222941,"runtime":7933,"slow":true,"start":1750100215008},"testFilePath":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAPI PETS › Updates a pet in the store whit form data › POST /pet/{petId} and status available\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'toString')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 67 |\u001b[39m     it\u001b[33m.\u001b[39meach(statuses)(\u001b[32m'POST /pet/{petId} and status %s'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m (status) \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 68 |\u001b[39m     \u001b[36mconst\u001b[39m payload \u001b[33m=\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'updatedName'\u001b[39m\u001b[33m,\u001b[39m status }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 69 |\u001b[39m     \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m controller\u001b[33m.\u001b[39mpostPet(id\u001b[33m.\u001b[39mtoString()\u001b[33m,\u001b[39m payload)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m       \u001b[90m// 1) Status 200 OK\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 71 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m       console\u001b[33m.\u001b[39mlog(res\u001b[33m.\u001b[39mbody)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:69:45\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:8:71\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous>.__awaiter (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:4:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:67:75\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAPI PETS › Updates a pet in the store whit form data › POST /pet/{petId} and status pending\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'toString')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 67 |\u001b[39m     it\u001b[33m.\u001b[39meach(statuses)(\u001b[32m'POST /pet/{petId} and status %s'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m (status) \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 68 |\u001b[39m     \u001b[36mconst\u001b[39m payload \u001b[33m=\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'updatedName'\u001b[39m\u001b[33m,\u001b[39m status }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 69 |\u001b[39m     \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m controller\u001b[33m.\u001b[39mpostPet(id\u001b[33m.\u001b[39mtoString()\u001b[33m,\u001b[39m payload)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m       \u001b[90m// 1) Status 200 OK\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 71 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m       console\u001b[33m.\u001b[39mlog(res\u001b[33m.\u001b[39mbody)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:69:45\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:8:71\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous>.__awaiter (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:4:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:67:75\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAPI PETS › Updates a pet in the store whit form data › POST /pet/{petId} and status sold\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'toString')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 67 |\u001b[39m     it\u001b[33m.\u001b[39meach(statuses)(\u001b[32m'POST /pet/{petId} and status %s'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m (status) \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 68 |\u001b[39m     \u001b[36mconst\u001b[39m payload \u001b[33m=\u001b[39m { name\u001b[33m:\u001b[39m \u001b[32m'updatedName'\u001b[39m\u001b[33m,\u001b[39m status }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 69 |\u001b[39m     \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m controller\u001b[33m.\u001b[39mpostPet(id\u001b[33m.\u001b[39mtoString()\u001b[33m,\u001b[39m payload)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m       \u001b[90m// 1) Status 200 OK\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 71 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m       console\u001b[33m.\u001b[39mlog(res\u001b[33m.\u001b[39mbody)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:69:45\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:8:71\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous>.__awaiter (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:4:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/pets.spec.ts\u001b[39m\u001b[0m\u001b[2m:67:75\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["API PETS"],"duration":295,"failureMessages":[],"fullName":"API PETS GET /pet/:id","status":"passed","title":"GET /pet/:id"},{"ancestorTitles":["API PETS","GET /pet/findByStatus"],"duration":472,"failureMessages":[],"fullName":"API PETS GET /pet/findByStatus should return pets with status available","status":"passed","title":"should return pets with status available"},{"ancestorTitles":["API PETS","GET /pet/findByStatus"],"duration":289,"failureMessages":[],"fullName":"API PETS GET /pet/findByStatus should return pets with status pending","status":"passed","title":"should return pets with status pending"},{"ancestorTitles":["API PETS","GET /pet/findByStatus"],"duration":306,"failureMessages":[],"fullName":"API PETS GET /pet/findByStatus should return pets with status sold","status":"passed","title":"should return pets with status sold"},{"ancestorTitles":["API PETS","Update an existing pet"],"duration":288,"failureMessages":[],"fullName":"API PETS Update an existing pet creates a new pet con id dinámico","status":"passed","title":"creates a new pet con id dinámico"},{"ancestorTitles":["API PETS","Updates a pet in the store whit form data"],"duration":1,"failureMessages":["TypeError: Cannot read properties of undefined (reading 'toString')\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:69:45\n    at Generator.next (<anonymous>)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:8:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:4:12)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:67:75\n    at Object.<anonymous> (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-each/build/bind.js:81:13)\n    at Promise.then.completed (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"API PETS Updates a pet in the store whit form data POST /pet/{petId} and status available","status":"failed","title":"POST /pet/{petId} and status available"},{"ancestorTitles":["API PETS","Updates a pet in the store whit form data"],"duration":0,"failureMessages":["TypeError: Cannot read properties of undefined (reading 'toString')\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:69:45\n    at Generator.next (<anonymous>)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:8:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:4:12)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:67:75\n    at Object.<anonymous> (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-each/build/bind.js:81:13)\n    at Promise.then.completed (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"API PETS Updates a pet in the store whit form data POST /pet/{petId} and status pending","status":"failed","title":"POST /pet/{petId} and status pending"},{"ancestorTitles":["API PETS","Updates a pet in the store whit form data"],"duration":0,"failureMessages":["TypeError: Cannot read properties of undefined (reading 'toString')\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:69:45\n    at Generator.next (<anonymous>)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:8:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:4:12)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/pets.spec.ts:67:75\n    at Object.<anonymous> (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-each/build/bind.js:81:13)\n    at Promise.then.completed (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"API PETS Updates a pet in the store whit form data POST /pet/{petId} and status sold","status":"failed","title":"POST /pet/{petId} and status sold"}]},{"numFailingTests":13,"numPassingTests":0,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750100224291,"runtime":9287,"slow":true,"start":1750100215004},"testFilePath":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Fetch brands › GET /brands\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  8 |\u001b[39m     it(\u001b[32m'GET /brands'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m  9 |\u001b[39m       \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'/brands'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 10 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 11 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m       expect(\u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(res\u001b[33m.\u001b[39mbody[\u001b[35m0\u001b[39m]))\u001b[33m.\u001b[39mtoEqual([\u001b[32m'_id'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'name'\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:10:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Create brands › POST /brands\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 |\u001b[39m         \u001b[33m.\u001b[39msend(data)\u001b[22m\n\u001b[2m     \u001b[90m 26 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 27 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m200\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mname)\u001b[33m.\u001b[39mtoEqual(data\u001b[33m.\u001b[39mname)\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'createdAt'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 30 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:27:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Create brands › Schema Verification - Name is a mandatory field\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m422\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 |\u001b[39m         \u001b[33m.\u001b[39msend(data)\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 43 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m422\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 44 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoEqual(\u001b[32m'Name is required'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 45 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:43:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Create brands › Schema Verification - Min char length for name > 1\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m422\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 54 |\u001b[39m         \u001b[33m.\u001b[39msend(data)\u001b[22m\n\u001b[2m     \u001b[90m 55 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 56 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m422\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 57 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoEqual(\u001b[32m'Brand name is too short'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 58 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 59 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:56:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Create brands › Schema Verification - Max char length for name = 30\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m422\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 67 |\u001b[39m         \u001b[33m.\u001b[39msend(data)\u001b[22m\n\u001b[2m     \u001b[90m 68 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 69 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m422\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoEqual(\u001b[32m'Brand name is too long'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 71 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:69:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Create brands › Schema Verification - Description must be a string\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m422\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 82 |\u001b[39m         \u001b[33m.\u001b[39msend(data)\u001b[22m\n\u001b[2m     \u001b[90m 83 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 84 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m422\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 85 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoEqual(\u001b[32m'Brand description must be a string'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 86 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 87 |\u001b[39m     it(\u001b[32m'Business Logic - Duplicate brand entries not allowed'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:84:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Create brands › Business Logic - Duplicate brand entries not allowed\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m422\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 100 |\u001b[39m         \u001b[33m.\u001b[39msend(data)\u001b[22m\n\u001b[2m     \u001b[90m 101 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 102 |\u001b[39m       expect(res2\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m422\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 103 |\u001b[39m       expect(res2\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoContain(\u001b[32m'already exists'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 104 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 105 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:102:31\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Fetch Individual Brand › GET /brand/:id › Business Logic - GET /brand/invalid_id should throw 404\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m404\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 121 |\u001b[39m         \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'/brands/'\u001b[39m \u001b[33m+\u001b[39m \u001b[32m'12348f0500b2931578c0a5ac'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 122 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 123 |\u001b[39m         expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m404\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 124 |\u001b[39m         expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoContain(\u001b[32m'Brand not found.'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 125 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 126 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:123:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Fetch Individual Brand › GET /brand/:id › GET /brand/:id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 127 |\u001b[39m       it(\u001b[32m'GET /brand/:id'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 128 |\u001b[39m         \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'/brands/'\u001b[39m \u001b[33m+\u001b[39m postBrand\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39m_id)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 129 |\u001b[39m         expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 130 |\u001b[39m         expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mname)\u001b[33m.\u001b[39mtoEqual(postBrand\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mname)\u001b[22m\n\u001b[2m     \u001b[90m 131 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 132 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:129:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Update brands › PUT /brands\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'name')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 136 |\u001b[39m     it(\u001b[32m'PUT /brands'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 137 |\u001b[39m       \u001b[36mconst\u001b[39m data \u001b[33m=\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 138 |\u001b[39m         \u001b[32m'name'\u001b[39m\u001b[33m:\u001b[39m newBrand\u001b[33m.\u001b[39mname \u001b[33m+\u001b[39m \u001b[32m' updated'\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 139 |\u001b[39m       }\u001b[22m\n\u001b[2m     \u001b[90m 140 |\u001b[39m       \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request\u001b[22m\n\u001b[2m     \u001b[90m 141 |\u001b[39m         \u001b[33m.\u001b[39mput(\u001b[32m'/brands/'\u001b[39m \u001b[33m+\u001b[39m newBrand\u001b[33m.\u001b[39m_id)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:138:26\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:8:71\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous>.__awaiter (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:4:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:136:34)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Update brands › PUT /brands/invalid_id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m422\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 153 |\u001b[39m         \u001b[33m.\u001b[39msend(data)\u001b[22m\n\u001b[2m     \u001b[90m 154 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 155 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m422\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 156 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoContain(\u001b[32m'Unable to update brands'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 157 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 158 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:155:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Delete Brands › DELETE /brands\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading '_id')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 161 |\u001b[39m     it(\u001b[32m'DELETE /brands'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 162 |\u001b[39m       \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 163 |\u001b[39m         \u001b[33m.\u001b[39m\u001b[36mdelete\u001b[39m(\u001b[32m'/brands/'\u001b[39m \u001b[33m+\u001b[39m newBrand\u001b[33m.\u001b[39m_id)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 164 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m200\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 165 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 166 |\u001b[39m     it(\u001b[32m'DELETE /brands/invalid_id'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:163:39\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:8:71\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous>.__awaiter (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:4:12)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:161:37)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mBrands › Delete Brands › DELETE /brands/invalid_id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m422\u001b[39m\n    Received: \u001b[31m503\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 167 |\u001b[39m       \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m request\u001b[22m\n\u001b[2m     \u001b[90m 168 |\u001b[39m         \u001b[33m.\u001b[39m\u001b[36mdelete\u001b[39m(\u001b[32m'/brands/'\u001b[39m \u001b[33m+\u001b[39m \u001b[35m123\u001b[39m)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 169 |\u001b[39m       expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m422\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 170 |\u001b[39m       expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39merror)\u001b[33m.\u001b[39mtoContain(\u001b[32m'Unable to delete brand'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 171 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 172 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:169:30\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/brend.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Brands","Fetch brands"],"duration":528,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:10:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Fetch brands GET /brands","status":"failed","title":"GET /brands"},{"ancestorTitles":["Brands","Create brands"],"duration":254,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:27:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Create brands POST /brands","status":"failed","title":"POST /brands"},{"ancestorTitles":["Brands","Create brands"],"duration":267,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m422\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:43:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Create brands Schema Verification - Name is a mandatory field","status":"failed","title":"Schema Verification - Name is a mandatory field"},{"ancestorTitles":["Brands","Create brands"],"duration":190,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m422\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:56:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Create brands Schema Verification - Min char length for name > 1","status":"failed","title":"Schema Verification - Min char length for name > 1"},{"ancestorTitles":["Brands","Create brands"],"duration":298,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m422\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:69:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Create brands Schema Verification - Max char length for name = 30","status":"failed","title":"Schema Verification - Max char length for name = 30"},{"ancestorTitles":["Brands","Create brands"],"duration":262,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m422\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:84:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Create brands Schema Verification - Description must be a string","status":"failed","title":"Schema Verification - Description must be a string"},{"ancestorTitles":["Brands","Create brands"],"duration":552,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m422\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:102:31\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Create brands Business Logic - Duplicate brand entries not allowed","status":"failed","title":"Business Logic - Duplicate brand entries not allowed"},{"ancestorTitles":["Brands","Fetch Individual Brand","GET /brand/:id"],"duration":312,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:123:32\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Fetch Individual Brand GET /brand/:id Business Logic - GET /brand/invalid_id should throw 404","status":"failed","title":"Business Logic - GET /brand/invalid_id should throw 404"},{"ancestorTitles":["Brands","Fetch Individual Brand","GET /brand/:id"],"duration":264,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:129:32\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Fetch Individual Brand GET /brand/:id GET /brand/:id","status":"failed","title":"GET /brand/:id"},{"ancestorTitles":["Brands","Update brands"],"duration":1,"failureMessages":["TypeError: Cannot read properties of undefined (reading 'name')\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:138:26\n    at Generator.next (<anonymous>)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:8:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:4:12)\n    at Object.<anonymous> (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:136:34)\n    at Promise.then.completed (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Brands Update brands PUT /brands","status":"failed","title":"PUT /brands"},{"ancestorTitles":["Brands","Update brands"],"duration":203,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m422\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:155:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Update brands PUT /brands/invalid_id","status":"failed","title":"PUT /brands/invalid_id"},{"ancestorTitles":["Brands","Delete Brands"],"duration":0,"failureMessages":["TypeError: Cannot read properties of undefined (reading '_id')\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:163:39\n    at Generator.next (<anonymous>)\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:8:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:4:12)\n    at Object.<anonymous> (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:161:37)\n    at Promise.then.completed (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Brands Delete Brands DELETE /brands","status":"failed","title":"DELETE /brands"},{"ancestorTitles":["Brands","Delete Brands"],"duration":576,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m422\u001b[39m\nReceived: \u001b[31m503\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:169:30\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brend.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Brands Delete Brands DELETE /brands/invalid_id","status":"failed","title":"DELETE /brands/invalid_id"}]},{"numFailingTests":1,"numPassingTests":3,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750100225119,"runtime":10115,"slow":true,"start":1750100215004},"testFilePath":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/categories.spec.ts","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCategories › GET / Categories\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m400\u001b[39m\n    Received: \u001b[31m200\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  9 |\u001b[39m     it(\u001b[32m'GET / Categories'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m() \u001b[33m=>\u001b[39m{\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m         \u001b[36mconst\u001b[39m res \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m controller\u001b[33m.\u001b[39mgetCategories()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 11 |\u001b[39m         expect(res\u001b[33m.\u001b[39mstatusCode)\u001b[33m.\u001b[39mtoEqual(\u001b[35m400\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m         expect(res\u001b[33m.\u001b[39mbody\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 13 |\u001b[39m         expect(\u001b[33mObject\u001b[39m\u001b[33m.\u001b[39mkeys(res\u001b[33m.\u001b[39mbody[\u001b[35m0\u001b[39m]))\u001b[33m.\u001b[39mtoEqual([\u001b[32m'_id'\u001b[39m\u001b[33m,\u001b[39m\u001b[32m'name'\u001b[39m])\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/categories.spec.ts\u001b[39m\u001b[0m\u001b[2m:11:32\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat fulfilled (\u001b[22m\u001b[2m\u001b[0m\u001b[36mspecs/categories.spec.ts\u001b[39m\u001b[0m\u001b[2m:5:58)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Categories"],"duration":1388,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m200\u001b[39m\n    at /Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/categories.spec.ts:11:32\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/categories.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Categories GET / Categories","status":"failed","title":"GET / Categories"},{"ancestorTitles":["Categories","Crate Categories"],"duration":417,"failureMessages":[],"fullName":"Categories Crate Categories POST/ categories","status":"passed","title":"POST/ categories"},{"ancestorTitles":["Categories","Update categories"],"duration":401,"failureMessages":[],"fullName":"Categories Update categories PUT/ categories","status":"passed","title":"PUT/ categories"},{"ancestorTitles":["Categories","Delete Categories"],"duration":418,"failureMessages":[],"fullName":"Categories Delete Categories DELETE / categories","status":"passed","title":"DELETE / categories"}]},{"numFailingTests":0,"numPassingTests":13,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750100227887,"runtime":12882,"slow":true,"start":1750100215005},"testFilePath":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/specs/brands.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["Brands","Fetch brands"],"duration":1973,"failureMessages":[],"fullName":"Brands Fetch brands GET /brands","status":"passed","title":"GET /brands"},{"ancestorTitles":["Brands","Create brands"],"duration":3,"failureMessages":[],"fullName":"Brands Create brands POST /brands","status":"passed","title":"POST /brands"},{"ancestorTitles":["Brands","Create brands"],"duration":207,"failureMessages":[],"fullName":"Brands Create brands Schema Verification - Name is a mandatory field","status":"passed","title":"Schema Verification - Name is a mandatory field"},{"ancestorTitles":["Brands","Create brands"],"duration":232,"failureMessages":[],"fullName":"Brands Create brands Schema Verification - Min char length for name > 1","status":"passed","title":"Schema Verification - Min char length for name > 1"},{"ancestorTitles":["Brands","Create brands"],"duration":214,"failureMessages":[],"fullName":"Brands Create brands Schema Verification - Max char length for name = 30","status":"passed","title":"Schema Verification - Max char length for name = 30"},{"ancestorTitles":["Brands","Create brands"],"duration":207,"failureMessages":[],"fullName":"Brands Create brands Schema Verification - Description must be a string","status":"passed","title":"Schema Verification - Description must be a string"},{"ancestorTitles":["Brands","Create brands"],"duration":304,"failureMessages":[],"fullName":"Brands Create brands Business Logic - Duplicate brand entries not allowed","status":"passed","title":"Business Logic - Duplicate brand entries not allowed"},{"ancestorTitles":["Brands","Fetch Individual Brand","GET /brand/:id"],"duration":306,"failureMessages":[],"fullName":"Brands Fetch Individual Brand GET /brand/:id Business Logic - GET /brand/invalid_id should throw 404","status":"passed","title":"Business Logic - GET /brand/invalid_id should throw 404"},{"ancestorTitles":["Brands","Fetch Individual Brand","GET /brand/:id"],"duration":307,"failureMessages":[],"fullName":"Brands Fetch Individual Brand GET /brand/:id GET /brand/:id","status":"passed","title":"GET /brand/:id"},{"ancestorTitles":["Brands","Update brands"],"duration":409,"failureMessages":[],"fullName":"Brands Update brands PUT /brands","status":"passed","title":"PUT /brands"},{"ancestorTitles":["Brands","Update brands"],"duration":213,"failureMessages":[],"fullName":"Brands Update brands PUT /brands/invalid_id","status":"passed","title":"PUT /brands/invalid_id"},{"ancestorTitles":["Brands","Delete Brands"],"duration":424,"failureMessages":[],"fullName":"Brands Delete Brands DELETE /brands","status":"passed","title":"DELETE /brands"},{"ancestorTitles":["Brands","Delete Brands"],"duration":218,"failureMessages":[],"fullName":"Brands Delete Brands DELETE /brands/invalid_id","status":"passed","title":"DELETE /brands/invalid_id"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":7,"noStackTrace":false,"nonFlagArgs":["specs"],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-junit/index.js",{"outputDirectory":"reports"}],["/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/jest-html-reporters/index.js",{"publicPath":"reports"}]],"rootDir":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing","runTestsByPath":false,"seed":-124789349,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"specs","testSequencer":"/Users/manuelcuevasgarcia/Documents/AUTOMATION/TypeScripy/course_api_testing/node_modules/@jest/test-sequencer/build/index.js","updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1750100228088,"_reporterOptions":{"publicPath":"reports","filename":"jest_html_reporters.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})